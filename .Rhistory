install.packages("alr4")
source("C:/Users/rjsai/Dropbox/UMN Courses/Plan B/measure_functions.R")
sku_list <- read.csv("C:/Users/rjsai/Dropbox/UMN Courses/Plan B/data/sku_list.csv")
str(sku_list)
sku_list <- read.csv("C:/Users/rjsai/Dropbox/UMN Courses/Plan B/data/sku_list.csv", stringsAsFactors = F)
sku_list <- read.csv("C:/Users/rjsai/Dropbox/UMN Courses/Plan B/data/sku_list.csv", stringsAsFactors = F)
str(sku_list)
pacman::p_load(dplyr)
sku_list %>% select(Brand, Category) %>% distinct()
blocks <- sku_list %>% select(Brand, Category) %>% distinct()
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(1, ., paste0)
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(1, ., paste0())
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(1, ., function(x) paste0(x))
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(., 1, function(x) paste0(x))
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(., 1, paste0)
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(., 1, paste)
blocks
sku_list %>% select(Brand, Category) %>% distinct()
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(., 1, paste, collapse = "")
blocks
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(., 1, paste, collapse = " ")
blocks
blocks <- sku_list %>% select(Brand, Category) %>% distinct() %>% apply(., 1, paste, collapse = "-")
blocks
i = 1
blocks <- sku_list %>% select(Brand, Category) %>% distinct()
b <- blocks[i,]
b
temp <- subset(sku_list, Brand == b[1] & Category == b[2])
temp
b
b[1]
filter(sku_list, Brand == b[1] & Category == b[2])
blocks <- sku_list %>% select(Brand, Category, Soruce) %>% distinct()
blocks <- sku_list %>% select(Brand, Category, Souce) %>% distinct()
blocks <- sku_list %>% select(Brand, Category, Source) %>% distinct()
blocks
b <- blocks[i,]
filter(sku_list, Brand == b[1] & Category == b[2] & Source == b[3])
str(sku_list)
b[1]
temp <- filter(sku_list, Brand == b[1], Category == b[2], Source == b[3])
temp
sku_list <- read.csv("C:/Users/rjsai/Dropbox/UMN Courses/Plan B/data/sku_list.csv", stringsAsFactors = F)
blocks <- sku_list %>% select(Brand, Category, Source) %>% distinct()
b <- blocks[i,]
b
b[1]
b[2]
filter(sku_list, "Brand" == b[1] & "Category" == b[2] & "Source" == b[3])
b[1]
filter(sku_list, "Brand" == b$Brand & "Category" == b$Category & "Source" == b$Source)
names(sku_list)
b$Category
b$Brand
b$Source
head(sku_list)
filter
filter(sku_list, Brand == b$Brand & Category == b$Category & Source == b$Source)
str(temp)
temp <- filter(sku_list, Brand == b$Brand & Category == b$Category & Source == b$Source)
str(temp)
paste(temp$Product.Line, temp$SKU, collapse = " ")
apply(temp, 1, function(x) paste(x$Product.Line, x$SKU, collapse = " "))
apply(temp, 1, function(x) paste(x["Product.Line"], x["SKU"], collapse = " "))
dist <- array(0, c(length(s), length(s)))
for(j in 1:length(s)) {
for(k in j:length(s)) {  #computing only half the matrix to remove redundant calculations
dist[j,k] <- wosa(s[j], s[k], type = "item", weight = "linear", sum.right = T)$score
}
}
s <- apply(temp, 1, function(x) paste(x["Product.Line"], x["SKU"], collapse = " ")) #clean
dist <- array(0, c(length(s), length(s)))
for(j in 1:length(s)) {
for(k in j:length(s)) {  #computing only half the matrix to remove redundant calculations
dist[j,k] <- wosa(s[j], s[k], type = "item", weight = "linear", sum.right = T)$score
}
}
dist
dist[lower.tri(dist)] <- t(dist)[lower.tri(dist)]   #fill lower triangle with upper triangle
dist
s
temp
dist
ui <- rv.ui <- grouped <- maxid <- maxdesc <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- os[ind]
rvg <- rv[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
rv.ui[ind] <- if(length(rvg) > 1) rep(lci_vec(rvg, type = "character"), length(rvg)) else rvg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxid[ind] <- max(idDist[ind, ind])
maxdesc[ind] <- max(descDist[ind, ind])
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
dist %>%
as.dist() %>%
hclust() %>%
cutree(h = cutoff) ->
group
cutoff <- .1
#groups by clustering
dist %>%
as.dist() %>%
hclust() %>%
cutree(h = cutoff) ->
group
ui <- rv.ui <- grouped <- maxid <- maxdesc <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- os[ind]
rvg <- rv[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
rv.ui[ind] <- if(length(rvg) > 1) rep(lci_vec(rvg, type = "character"), length(rvg)) else rvg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxid[ind] <- max(idDist[ind, ind])
maxdesc[ind] <- max(descDist[ind, ind])
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
ui <- rv.ui <- grouped <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- s[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
pacman::p_load(dplyr, qualV)
ui <- rv.ui <- grouped <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- s[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
prod_grp <- foreach(i = seq_len(nrow(sku_list)), .combine = rbind, .packages = c("foreach", "dplyr")) %dopar% {
cutoff <- .1
#subset block
b <- blocks[i,]
temp <- filter(sku_list, Brand == b$Brand & Category == b$Category & Source == b$Source)
s <- apply(temp, 1, function(x) paste(x["Product.Line"], x["SKU"], collapse = " ")) #clean
#create a distance matrix using measure score function
dist <- array(0, c(length(s), length(s)))
for(j in 1:length(s)) {
for(k in j:length(s)) {  #computing only half the matrix to remove redundant calculations
dist[j,k] <- wosa(s[j], s[k], type = "item", weight = "linear", sum.right = T)$score
}
}
#fill lower triangle
dist[lower.tri(dist)] <- t(dist)[lower.tri(dist)]   #fill lower triangle with upper triangle
#groups by clustering
dist %>%
as.dist() %>%
hclust() %>%
cutree(h = cutoff) ->
group
#create unique identifier for each group
#check if grouped is accurate
ui <- rv.ui <- grouped <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- s[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
return(data.frame(group, ui, grouped, maxdist, nextdist, stringsAsFactors = F))
}
pacman::p_load(dplyr, foreach, qualV)
prod_grp <- foreach(i = seq_len(nrow(sku_list)), .combine = rbind, .packages = c("foreach", "dplyr")) %do% {
cutoff <- .1
#subset block
b <- blocks[i,]
temp <- filter(sku_list, Brand == b$Brand & Category == b$Category & Source == b$Source)
s <- apply(temp, 1, function(x) paste(x["Product.Line"], x["SKU"], collapse = " ")) #clean
#create a distance matrix using measure score function
dist <- array(0, c(length(s), length(s)))
for(j in 1:length(s)) {
for(k in j:length(s)) {  #computing only half the matrix to remove redundant calculations
dist[j,k] <- wosa(s[j], s[k], type = "item", weight = "linear", sum.right = T)$score
}
}
#fill lower triangle
dist[lower.tri(dist)] <- t(dist)[lower.tri(dist)]   #fill lower triangle with upper triangle
#groups by clustering
dist %>%
as.dist() %>%
hclust() %>%
cutree(h = cutoff) ->
group
#create unique identifier for each group
#check if grouped is accurate
ui <- rv.ui <- grouped <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- s[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
return(data.frame(group, ui, grouped, maxdist, nextdist, stringsAsFactors = F))
}
i
#block by brand and category
blocks <- sku_list %>% select(Brand, Category, Source) %>% distinct()
prod_grp <- foreach(i = seq_len(nrow(blocks)), .combine = rbind, .packages = c("foreach", "dplyr")) %do% {
cutoff <- .1
#subset block
b <- blocks[i,]
temp <- filter(sku_list, Brand == b$Brand & Category == b$Category & Source == b$Source)
s <- apply(temp, 1, function(x) paste(x["Product.Line"], x["SKU"], collapse = " ")) #clean
#create a distance matrix using measure score function
dist <- array(0, c(length(s), length(s)))
for(j in 1:length(s)) {
for(k in j:length(s)) {  #computing only half the matrix to remove redundant calculations
dist[j,k] <- wosa(s[j], s[k], type = "item", weight = "linear", sum.right = T)$score
}
}
#fill lower triangle
dist[lower.tri(dist)] <- t(dist)[lower.tri(dist)]   #fill lower triangle with upper triangle
#groups by clustering
dist %>%
as.dist() %>%
hclust() %>%
cutree(h = cutoff) ->
group
#create unique identifier for each group
#check if grouped is accurate
ui <- rv.ui <- grouped <- maxdist <- nextdist <- rep(0, length(s))
for(g in unique(group)){
ind <- which(group == g)
sg <- s[ind]
ui[ind] <- if(length(sg) > 1) rep(lci_vec(sg), length(sg)) else sg
grouped[ind] <- ifelse(length(sg) > 1, 1, 0)
maxdist[ind] <- max(dist[ind, ind])
nextdist[ind] <- suppressWarnings(min(setdiff(dist[ind,], dist[ind, ind])))
}
return(data.frame(group, ui, grouped, maxdist, nextdist, stringsAsFactors = F))
}
prod_grp
View(prod_grp)
sku_list %>% group_by(Brand, Category, Source) %>% unite(Product.Line, SKU, sep = " ")
pacman::p_load(dplyr, tidyr, foreach, qualV)
sku_list %>% group_by(Brand, Category, Source) %>% unite(Product.Line, SKU, sep = " ")
unite
str(sku_list %>% group_by(Brand, Category, Source) %>% unite(Product.Line, SKU, sep = " ") )
sku_list %>% group_by(Brand, Category, Source) %>% unite(Desc, Product.Line, SKU, sep = " ")
str(sku_list %>% group_by(Brand, Category, Source) %>% unite(Desc, Product.Line, SKU, sep = " "))
sku_list %>% group_by(Brand, Category, Source) %>% unite(Desc, Product.Line, SKU, sep = " ") %>% wosaMat(Desc)
wosaMat <- function(s) {
dist <- array(0, c(length(s), length(s)))
for(j in 1:length(s)) {
for(k in j:length(s)) {  #computing only half the matrix to remove redundant calculations
dist[j,k] <- wosa(s[j], s[k], type = "item", weight = "linear", sum.right = T)$score
}
}
#fill lower triangle
dist[lower.tri(dist)] <- t(dist)[lower.tri(dist)]   #fill lower triangle with upper triangle
return(dist)
}
sku_list %>% group_by(Brand, Category, Source) %>% unite(Desc, Product.Line, SKU, sep = " ") %>% wosaMat(Desc)
